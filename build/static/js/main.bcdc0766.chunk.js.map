{"version":3,"sources":["components/Input.js","components/Filter.js","components/Button.js","components/Entry.js","components/Entries.js","components/Form.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Input","text","value","onChange","Filter","filterText","filterVal","filterChange","Button","id","type","onClick","Entry","entry","name","number","Entries","entries","deleteClick","map","person","key","Form","onSubmit","nameText","nameVal","nameChange","numText","numVal","numChange","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","class","notification","setNotification","useEffect","personService","initialPersons","entriesToShow","filter","toLowerCase","includes","event","target","preventDefault","window","confirm","existingPerson","updateNumber","setTimeout","newEntry","concat","deletePerson","Number","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bcdc0766.chunk.js","sourcesContent":["import React from 'react'\n\nconst Input = ( { text, value, onChange } ) => {\n    return (\n      <div>\n          {text}:\n          <input \n            value={value}\n            onChange={onChange}\n          />\n      </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport Input from './Input'\n\nconst Filter = ( { filterText, filterVal, filterChange } ) => {\n    return ( \n      <Input \n        text={filterText} \n        value={filterVal} \n        onChange={filterChange} />\n           )\n}\n\nexport default Filter","import React from 'react'\n\nconst Button = ({id, type, text, onClick}) => {\n  return (\n    <button id={id} type={type} onClick={onClick}>\n    {text}\n    </button>\n  )\n}\n    \nexport default Button","import React from 'react'\nimport Button from './Button'\n\nconst Entry = ({ entry, onClick }) => {\n  return (\n    <div>\n      {entry.name} {entry.number} \n      <Button id={entry.id} type='button' text='delete' onClick={onClick} />\n    </div>\n  )\n}\n\nexport default Entry","import React from 'react'\nimport Entry from './Entry'\n\nconst Entries = ({ entries, deleteClick }) => {\n  return (\n    <div>\n      {entries.map(\n        person => \n          <Entry key={person.name} entry={person} onClick={deleteClick}/>\n      )}\n    </div>\n  )\n}\n\nexport default Entries\n","import React from 'react'\nimport Button from './Button'\nimport Input from './Input'\n\nconst Form = ({onSubmit,\n               nameText, nameVal, nameChange,\n               numText, numVal, numChange}) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <Input \n        text={nameText} \n        value={nameVal} \n        onChange={nameChange} \n      />\n      <Input \n        text={numText} \n        value={numVal} \n        onChange={numChange} \n      />\n        <Button\n          type='submit'\n          text='Add'\n        />\n      </form>\n  )\n}\n\nexport default Form","import React from 'react'\n\nconst Notification = ({ message, className }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={className}>\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n  \nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteEntry = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response)\n  }\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n  \nexport default { getAll, create, deleteEntry, update }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Entries from './components/Entries'\nimport Form from './components/Form'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notification, setNotification ] = useState({message: null, class:'notify'})\n  \n  /* Get initial phonebook entries from JSON server */\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n    }, [])\n\n  /* Add entry to JSON upon form submission and update browser view */\n  const addEntry = (event) => {\n    event.preventDefault()\n    const nameExists = persons.map(person => person.name).includes(newName)\n    if (nameExists) {\n        if (window.confirm(`${newName} is already in this phonebook! Replace number with a new one?`)) {\n          const existingPerson = persons.filter(person => person.name === newName)[0]\n          const updateNumber = {...existingPerson, number: newNumber}\n          personService\n            .update(existingPerson.id, updateNumber)\n            .then(response => {\n              setPersons(persons.map(person => \n                          person.id !== existingPerson.id \n                          ? person \n                          : response ))\n              setNewName('')\n              setNewNumber('')\n              setNotification({message:`Updated number for ${existingPerson.name}`, class:'notify'})\n              setTimeout(() => {setNotification({...notification, message:null})}, 5000)\n            })\n        }\n    }\n    else {\n      const entryObject = {\n        name: newName,\n        number: newNumber\n      }\n    \n      personService\n        .create(entryObject)\n        .then(newEntry => {\n          setPersons(persons.concat(newEntry))\n          setNewName('')\n          setNewNumber('')\n          setNotification({message:`Added ${newEntry.name} to phonebook`, class:'notify'})\n          setTimeout(() => {setNotification({...notification, message:null})}, 5000)\n        })\n      }\n  }\n\n  /* Delete note upon button press */\n  const deleteButton = (event) => {\n    const id = event.target.id\n    const deletePerson = persons.filter(person => person.id === Number(id))[0]\n    if (window.confirm(`Delete ${deletePerson.name}?`)) {\n      personService\n        .deleteEntry(id)\n        .catch(error => {\n          setNotification({message:`${deletePerson.name} was already deleted from the server.`, \n                           class:'notify notify-error'})\n        })\n      setPersons(persons.filter(person => person.id !== Number(id)))\n      setNotification({message:`Removed ${deletePerson.name} from phonebook`, class:'notify'})\n      setTimeout(() => {setNotification({...notification, message:null})}, 5000)\n    }\n  }\n\n  /* Filter definition for filter input */\n  const entriesToShow = newFilter === ''\n  ? persons\n  : persons.filter(person => \n                   person.name.toLowerCase().includes(newFilter))\n\n  /* Update state of phonebook entry and filter inputs */\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  \n  const handleNumChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n     \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification.message} className={notification.class} />\n      <Filter \n        filterText='Filter by' \n        filterVal={newFilter} \n        filterChange={handleFilterChange}\n      />\n      <h3>Add New Phonebook Entry</h3>\n      <Form\n        onSubmit={addEntry}\n        nameText='Name'  \n        nameVal={newName}\n        nameChange={handleNameChange}\n        numText='Number' \n        numVal={newNumber}\n        numChange={handleNumChange}\n      />\n      <h3>Numbers</h3>\n      <Entries entries={entriesToShow} deleteClick={deleteButton} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}